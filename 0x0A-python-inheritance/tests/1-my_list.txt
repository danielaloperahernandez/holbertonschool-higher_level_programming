The ``1-my_list`` module
======================

Using ``print_sorted``
--------------------

Importing the function from the module:
        >>> My_list = __import__("1-my_list").MyList
		>>> my_test_list = My_list([1, 4, 2, 3, 5])

Checking regular case
        >>> print(my_test_list)
        [1, 4, 2, 3, 5]

Checking print_sorted
		>>> my_test_list.print_sorted()
		[1, 2, 3, 4, 5]

Checking sorted method with 2 arguments
		>>> my_test_list.print_sorted([1, 6, 4], 56)
		Traceback (most recent call last):
			...
		TypeError: print_sorted() takes 1 positional argument but 3 were given

Checking empty list case
		>>> my_test_list = My_list()
		>>> print(my_test_list)
		[]

Checking list with characters
		>>> my_test_list = My_list(['m', '98', 'w'])
		>>> print(my_test_list)
		['m', '98', 'w']

Checking append element
		>>> my_test_list.append(67)
		>>> print(my_test_list)
		['m', '98', 'w', 67]

Checking negative elements
		>>> my_test_list = My_list([1, -90, -54, 0])
		>>> my_test_list.print_sorted()
		[-90, -54, 0, 1]

Checking list with decimals
		>>> my_test_list = My_list([9.67, 8.45, 9.32])
		>>> my_test_list.print_sorted()
		[8.45, 9.32, 9.67]

Checking list with only one element
		>>> my_test_list = My_list([90])
		>>> my_test_list.print_sorted()
		[90]

Checking heritage
		>>> issubclass(type(my_test_list), list)
		True

Adding a sublist
		>>> my_test_list.append([1, 4])
		>>> print(my_test_list)
		[90, [1, 4]]

Sorted list with a sublist
		>>> my_test_list.print_sorted(my_test_list)
		Traceback (most recent call last):
			...
		TypeError: print_sorted() takes 1 positional argument but 2 were given
